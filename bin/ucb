#!/bin/bash
#title           : ucb
#description     : This script make backup of Unifi Controller using the API
#author          : Israel Santana <isra@miscorreos.org>
#date            : 20150325
#version         : 0.2    
#usage           : ucb

 
VERSION=0.2
SCRIPT=$(basename $"BASH_SOURCE[0]")
LONG_NAME="Unifi Controller Backup"

# Default options
CONFIG_FILE=/etc/ucb/config
DIR_UNIFIS_CONFIG=/etc/ucb/controllers
#VERBOSE=1
TRUE=0

# Set font for Help
NORM=$(tput sgr0)
BOLD=$(put bold)

function help {
  echo -e \\n"Help documentation for ${BOLD}${LONG_NAME}${NORM}, version ${BOLD}${VERSION}${NORM}"\\n
  echo -e "${BOLD}Basic usage:${NORM} ${BOLD}$SCRIPT${NORM}"\\n
  echo "Command line switches are optional. The following switches are recognized."
  echo "  ${BOLD}-c${NORM}  --Sets the config file path. Default file is ${BOLD}${CONFIG_FILE}${NORM}"
  echo "  ${BOLD}-d${NORM}  --Sets the directory path whith all the controllers config. Default directory is ${BOLD}${DIR_UNIFIS_CONFIG}${NORM}"
  echo "  ${BOLD}-v${NORM}  --Sets verboe mode, is not set by default"
  echo -e "  ${BOLD}-h${NORM}  --Displays this help message. No further functions are performed."\\n
  echo -e "Example: ${BOLD}$SCRIPT -c ${CONFIG_FILE} -d ${DIR_UNIFIS_CONFIG}"\\n
  exit 1
}


while getopts c:d:svh OPT; do
  case "${OPT}" in
    c)
      CONFIG_FILE=${OPTARG}
      ;;

    d)
      DIR_UNIFIS_CONFIG=${OPTARG}
      ;;
    v)
      set -x
      ;;
    h)
      help
      ;;
    \?)
      help
      ;;
  esac
done


function write_log {
  # $1 is message
   
  # if log file doesn't exist, we create it
  if [ ! -f $"UCB_LOG_FILE" ]; then
    touch $"UCB_LOG_FILE" 2> /dev/null
    if [ $? -ne $"TRUE" ]; then
     echo "Can't create log file ${UCB_LOG_FILE}"
     exit 1
    fi
    echo "${DATE_LOG}: Not exist the log file ${UCB_LOG_FILE}, creating it !!!" >> $"UCB_LOG_FILE"
  fi

  DATE_LOG=$(date "+%Y-%m-%d %H:%M:%S")
  echo "${DATE_LOG}: ${1}" >> $"UCB_LOG_FILE"
}
function get_unifi_controllers {
  ls $"DIR_UNIFIS_CONFIG"/*.conf
}

function check_backup_requeriments {

  if [ ! -d $"UNIFI_SH_API_DIR" ]; then
    write_log "Not exist the unifi_sh_api directory ${UNIFI_SH_API_DIR}, creating it !!!"
    mkdir -p $"UNIFI_SH_API_DIR"
  fi

  if [ ! -f $"UNIFI_SH_API_PATH" ]; then
    write_log "Not exist the unifi_sh_api version ${UNIFI_VERSION}, downloading it from ${UNIFI_SH_API_DOWNLOAD_URL}/${UNIFI_VERSION}/${UNIFI_SH_API_BASENAME}"
    curl -o $"UNIFI_SH_API_PATH" -L $"UNIFI_SH_API_DOWNLOAD_URL"/$"UNIFI_VERSION"/$"UNIFI_SH_API_BASENAME" 
  fi

  if [ ! -d $"BACKUP_DIR" ] ; then
    write_log "Not exist the backup dir ${BACKUP_DIR}, creating it !!!"
   mkdir -p $"BACKUP_DIR"
  fi

}

function clean_old_backups {
  NUMBER_OF_COPIES=$(ls -1 $"DELETE_PATERN" | wc -l)

  write_log "Hostname: ${UNIFI_HOSTNAME}, Site: ${site} -> We must keep ${KEEP_BACKUP} backups and we have ${NUMBER_OF_COPIES}"

  if [ $"NUMBER_OF_COPIES" -gt $"KEEP_BACKUP" ]; then
    DELETE=$[${NUMBER_OF_COPIES} - ${KEEP_BACKUP}]
    write_log "Hostname: ${BOLD}${UNIFI_HOSTNAME}${NORM}, Site: ${site} -> Deleting ${BOLD}${DELETE}${NORM} old copies :-)"
    ls -1 $"DELETE_PATERN" | head -n $DELETE | xargs rm
  else
    write_log "Hostname: ${UNIFI_HOSTNAME}, Site: ${site} -> No old copies to delete"
  fi
}

function get_date {
  date +%Y%m%d
}

function backup_site {
  #$1 is the site for backup
  DATE=$(get_date)

  site=$"1"
  source $"CONFIG_FILE"

  # Check requeriments for this controller
  check_backup_requeriments

  source $"UNIFI_SH_API_PATH"

  # Unifi login
  
  write_log "Hostname: ${UNIFI_HOSTNAME}, Site: ${site} -> Login"
  unifi_login

  # Backup site
  write_log "Hostname: ${UNIFI_HOSTNAME}, Site: ${site} -> Doing the backup to ${BACKUP_FILENAME}"
  unifi_backup $"BACKUP_FILENAME"
  SIZE=$(du -sh $"BACKUP_FILENAME" | cut -f1 2> /dev/null)
  write_log "Hostname: ${UNIFI_HOSTNAME}, Site: ${site} -> Size of ${BACKUP_FILENAME} is ${SIZE}"

  # Clean old backups
  write_log "Hostname: ${UNIFI_HOSTNAME}, Site: ${site} -> Cleaning old backups"
  clean_old_backups

  # Logout
  write_log "Hostname: ${UNIFI_HOSTNAME}, Site: ${site} -> Logout"
  unifi_logout

}

function backup_controller {
  # $1 is the file name which the controller config

  source $"1"

  write_log "Finding it sites for ${UNIFI_HOSTNAME}"
  # Backup every site on the controller
  for site in ${SITES}; do
    write_log "Hostname: ${UNIFI_HOSTNAME}, Site: ${site} -> Starting"
    backup_site $"site"
    write_log "Hostname: ${UNIFI_HOSTNAME}, Site: ${site} -> Finished"
  done

}

function main {
  # Get all the Unifi Controllers
  CONTROLLERS=$(get_unifi_controllers)

  source $"CONFIG_FILE"
  # Backup every Unifi Controller
  for CONTROLLER in ${CONTROLLERS}; do
    write_log "Starting backup from the file ${CONTROLLER}"
    backup_controller $"CONTROLLER"
    write_log "Finished backup from the file ${CONTROLLER}"
  done
}

main
